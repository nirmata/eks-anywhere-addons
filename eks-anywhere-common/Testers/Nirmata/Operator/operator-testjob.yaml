apiVersion: batch/v1
kind: CronJob
metadata:
  name: operator-test-cronjob
  namespace: nirmata-system
spec:
  schedule: "10 10 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: 'kyverno-operator'
          containers:
            - name: job
              # image: 'alpine/k8s:1.26.2'
              image: ghcr.io/nirmata/alpine-kubectl:1.28
              imagePullPolicy: Always
              command:
                - /bin/bash
              args:
                - -c
                - >-
                  oper_nsp=nirmata-system;
                  oper_name=kyverno-operator;
                  
                  echo "1. Waiting for kyvenro operator deployment $oper_nsp/$oper_name to get ready...";
                  while [ -z $operator_deploy ]; 
                  do operator_deploy=`kubectl get deploy -n $oper_nsp $oper_name -o jsonpath="{.metadata.name}"` 2>/dev/null && echo Waiting;
                  sleep 5;
                  done;

                  oper_exp_replicas=`kubectl get deploy -n $oper_nsp $oper_name -o jsonpath="{.status.replicas}"` 2>/dev/null;
                  oper_ready_replicas=`kubectl get deploy -n $oper_nsp $oper_name -o jsonpath="{.status.readyReplicas}"` 2>/dev/null;
                  echo "Deployment created. $oper_ready_replicas out of $oper_exp_replicas replicas ready";

                  while [ "$oper_ready_replicas" != "$oper_exp_replicas" ];
                  do oper_ready_replicas=`kubectl get deploy -n $oper_nsp $oper_name -o jsonpath="{.status.readyReplicas}"` && echo Waiting;
                  sleep 5;
                  done;
                  echo "Operator ready";

                  echo "2. Checking readiness probe for kyvenro pod...";
                  kyverno_pod="...";
                  while [[ "$kyverno_pod" != "kyverno-"* ]];
                  do 
                    kyverno_pod=`kubectl get pod -n kyverno -l app=kyverno --field-selector=status.phase==Running -o jsonpath="{.items[0].metadata.name}"` && echo Waiting;
                    sleep 15;
                  done;
                  echo ...Success;
                  echo -e "apiVersion: kyverno.io/v1
                  \nkind: ClusterPolicy
                  \nmetadata:
                  \n  name: autotest-disallow-default-namespace
                  \n  annotations:
                  \n    pod-policies.kyverno.io/autogen-controllers: none
                  \nspec:
                  \n  validationFailureAction: Audit
                  \n  background: true
                  \n  rules:
                  \n  - name: validate-namespace
                  \n    match:
                  \n      any:
                  \n      - resources:
                  \n          kinds:
                  \n          - Pod
                  \n    validate:
                  \n      message: \"Using default namespace is not allowed.\"
                  \n      pattern:
                  \n        metadata:
                  \n          namespace: \"!default\"" | kubectl apply -f -

                  echo "3. Checking policy...."

                  sleep 30;

                  policy_status=`kubectl get cpol autotest-disallow-default-namespace -o jsonpath="{.status.ready}"`;
                  if [[ "$policy_status" == "true" ]]; 
                  then
                      echo "Verified Kyverno deployment"
                      kubectl delete cpol autotest-disallow-default-namespace
                      exit 0
                  fi 

                  echo "Failed to verify Kyverno deployment. Exiting"
                  exit 1
          restartPolicy: Never
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
